version: 1
name: "Login and Profile Attack Scenario"
description: "Login to application and perform attacks on authenticated endpoints"

# Global variables
vars:
  base_url: "https://google.com"
  username: "admin"
  password: "password123"

# Session configuration
session:
  enabled: true
  target: "{{ vars.base_url }}"
  timeout: "30s"

# Attack configuration
attack:
  enabled: true
  concurrency: 5
  payload_sets: ["xss.reflected", "sqli.error", "ssrf.basic"]

# Scenario steps
steps:
  # Step 1: Navigate to login page
  - id: navigate_login
    type: browser:navigate
    url: "{{ vars.base_url }}/login"
    wait: "networkidle"
    description: "Navigate to login page"

  # Step 2: Fill login form
  - id: fill_login_form
    type: browser:fill
    selectors:
      - { sel: "#username", value: "{{ vars.username }}" }
      - { sel: "#password", value: "{{ vars.password }}" }
    description: "Fill username and password"

  # Step 3: Submit login form
  - id: submit_login
    type: browser:click
    selector: "button[type=submit]"
    wait: "networkidle"
    description: "Click login button"
    on_success: [capture_session]

  # Step 4: Capture session (cookies, headers, etc.)
  - id: capture_session
    type: session:capture
    save:
      - cookies
      - headers
      - storage
    description: "Capture session data after login"

  # Step 5: Navigate to profile page
  - id: navigate_profile
    type: browser:navigate
    url: "{{ vars.base_url }}/profile"
    wait: "domcontentloaded"
    description: "Navigate to profile page"

  # Step 6: Attack profile update form
  - id: attack_profile_form
    type: net:attack
    target: "{{ vars.base_url }}/api/profile/update"
    method: "POST"
    parameters:
      - name
      - email
      - bio
    payload_sets: ["xss.reflected", "sqli.error"]
    description: "Attack profile update endpoint"
    session_required: true

  # Step 7: Navigate to settings page
  - id: navigate_settings
    type: browser:navigate
    url: "{{ vars.base_url }}/settings"
    wait: "domcontentloaded"
    description: "Navigate to settings page"

  # Step 8: Attack settings form
  - id: attack_settings_form
    type: net:attack
    target: "{{ vars.base_url }}/api/settings/update"
    method: "POST"
    parameters:
      - theme
      - language
      - notifications
    payload_sets: ["xss.reflected", "sqli.error", "ssrf.basic"]
    description: "Attack settings update endpoint"
    session_required: true

  # Step 9: Navigate to admin panel (if accessible)
  - id: navigate_admin
    type: browser:navigate
    url: "{{ vars.base_url }}/admin"
    wait: "domcontentloaded"
    description: "Navigate to admin panel"
    on_failure: [skip_admin_attack]

  # Step 10: Attack admin endpoints
  - id: attack_admin_endpoints
    type: net:attack
    target: "{{ vars.base_url }}/api/admin/users"
    method: "GET"
    parameters:
      - page
      - limit
      - search
    payload_sets: ["sqli.error", "ssrf.basic"]
    description: "Attack admin users endpoint"
    session_required: true

  # Step 11: Generate report
  - id: generate_report
    type: report:generate
    format: "html"
    output: "reports/login_attack_report.html"
    description: "Generate attack report"

# Error handling
on_error:
  - type: session:close
    description: "Close session on error"
  - type: report:generate
    format: "json"
    output: "reports/error_report.json"
    description: "Generate error report"

# Success handling
on_success:
  - type: session:close
    description: "Close session on success"
  - type: report:generate
    format: "html"
    output: "reports/success_report.html"
    description: "Generate success report"
