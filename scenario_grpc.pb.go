// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: scenario.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScenarioService_ValidateScenario_FullMethodName = "/owaspattacksimulator.scenario.ScenarioService/ValidateScenario"
	ScenarioService_ParseScenario_FullMethodName    = "/owaspattacksimulator.scenario.ScenarioService/ParseScenario"
	ScenarioService_ExecuteScenario_FullMethodName  = "/owaspattacksimulator.scenario.ScenarioService/ExecuteScenario"
)

// ScenarioServiceClient is the client API for ScenarioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScenarioServiceClient interface {
	ValidateScenario(ctx context.Context, in *ValidateScenarioRequest, opts ...grpc.CallOption) (*ValidateScenarioResponse, error)
	ParseScenario(ctx context.Context, in *ParseScenarioRequest, opts ...grpc.CallOption) (*ParseScenarioResponse, error)
	ExecuteScenario(ctx context.Context, in *ExecuteScenarioRequest, opts ...grpc.CallOption) (ScenarioService_ExecuteScenarioClient, error)
}

type scenarioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScenarioServiceClient(cc grpc.ClientConnInterface) ScenarioServiceClient {
	return &scenarioServiceClient{cc}
}

func (c *scenarioServiceClient) ValidateScenario(ctx context.Context, in *ValidateScenarioRequest, opts ...grpc.CallOption) (*ValidateScenarioResponse, error) {
	out := new(ValidateScenarioResponse)
	err := c.cc.Invoke(ctx, ScenarioService_ValidateScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) ParseScenario(ctx context.Context, in *ParseScenarioRequest, opts ...grpc.CallOption) (*ParseScenarioResponse, error) {
	out := new(ParseScenarioResponse)
	err := c.cc.Invoke(ctx, ScenarioService_ParseScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) ExecuteScenario(ctx context.Context, in *ExecuteScenarioRequest, opts ...grpc.CallOption) (ScenarioService_ExecuteScenarioClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScenarioService_ServiceDesc.Streams[0], ScenarioService_ExecuteScenario_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &scenarioServiceExecuteScenarioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScenarioService_ExecuteScenarioClient interface {
	Recv() (*ScenarioEvent, error)
	grpc.ClientStream
}

type scenarioServiceExecuteScenarioClient struct {
	grpc.ClientStream
}

func (x *scenarioServiceExecuteScenarioClient) Recv() (*ScenarioEvent, error) {
	m := new(ScenarioEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScenarioServiceServer is the server API for ScenarioService service.
// All implementations must embed UnimplementedScenarioServiceServer
// for forward compatibility
type ScenarioServiceServer interface {
	ValidateScenario(context.Context, *ValidateScenarioRequest) (*ValidateScenarioResponse, error)
	ParseScenario(context.Context, *ParseScenarioRequest) (*ParseScenarioResponse, error)
	ExecuteScenario(*ExecuteScenarioRequest, ScenarioService_ExecuteScenarioServer) error
	mustEmbedUnimplementedScenarioServiceServer()
}

// UnimplementedScenarioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScenarioServiceServer struct {
}

func (UnimplementedScenarioServiceServer) ValidateScenario(context.Context, *ValidateScenarioRequest) (*ValidateScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateScenario not implemented")
}
func (UnimplementedScenarioServiceServer) ParseScenario(context.Context, *ParseScenarioRequest) (*ParseScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseScenario not implemented")
}
func (UnimplementedScenarioServiceServer) ExecuteScenario(*ExecuteScenarioRequest, ScenarioService_ExecuteScenarioServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteScenario not implemented")
}
func (UnimplementedScenarioServiceServer) mustEmbedUnimplementedScenarioServiceServer() {}

// UnsafeScenarioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScenarioServiceServer will
// result in compilation errors.
type UnsafeScenarioServiceServer interface {
	mustEmbedUnimplementedScenarioServiceServer()
}

func RegisterScenarioServiceServer(s grpc.ServiceRegistrar, srv ScenarioServiceServer) {
	s.RegisterService(&ScenarioService_ServiceDesc, srv)
}

func _ScenarioService_ValidateScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).ValidateScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_ValidateScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).ValidateScenario(ctx, req.(*ValidateScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_ParseScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).ParseScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_ParseScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).ParseScenario(ctx, req.(*ParseScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_ExecuteScenario_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteScenarioRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScenarioServiceServer).ExecuteScenario(m, &scenarioServiceExecuteScenarioServer{stream})
}

type ScenarioService_ExecuteScenarioServer interface {
	Send(*ScenarioEvent) error
	grpc.ServerStream
}

type scenarioServiceExecuteScenarioServer struct {
	grpc.ServerStream
}

func (x *scenarioServiceExecuteScenarioServer) Send(m *ScenarioEvent) error {
	return x.ServerStream.SendMsg(m)
}

// ScenarioService_ServiceDesc is the grpc.ServiceDesc for ScenarioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScenarioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "owaspattacksimulator.scenario.ScenarioService",
	HandlerType: (*ScenarioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateScenario",
			Handler:    _ScenarioService_ValidateScenario_Handler,
		},
		{
			MethodName: "ParseScenario",
			Handler:    _ScenarioService_ParseScenario_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteScenario",
			Handler:       _ScenarioService_ExecuteScenario_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scenario.proto",
}
